@page "/detalii-proiectul-meu/{cod:int}"
@using ProiectPractica.Entities
@inject ProiectPractica.Data.ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using System.Globalization
<h3>Detalii Proiect</h3>

@if (proiect == null)
{
    <p>Proiectul nu a fost găsit sau se încarcă...</p>
}
else
{
    <div class="card border-info shadow-sm mb-4">
        <div class="card-body">
            <h5 class="card-title">@proiect.NumeClient (@proiect.Cod)</h5>
            <h6 class="card-subtitle mb-3 text-muted">@proiect.Domeniul</h6>
            <p class="card-text">
                <strong>Obiect contract:</strong> @proiect.ObiectulContractului<br />
                <strong>Valoare:</strong> @proiect.ValoareContract.ToString("C", new CultureInfo("ro-RO"))<br />
                <strong>Status:</strong> @proiect.Status.ToString()<br />
                <strong>Semnat la:</strong> @proiect.DataSemnareContract.ToShortDateString()<br />
                <strong>Încheiere la:</strong> @proiect.DataIncheiereContract.ToShortDateString()<br />
                <strong>Client public:</strong> @(proiect.EsteClientPublic ? "Da" : "Nu")<br />
                <strong>Amendamente:</strong> @(proiect.ExistaAmendamente ? $"Da ({proiect.NumarAmendamente})" : "Nu")<br />
                <strong>Subcontractori:</strong> @(proiect.AreSubcontractor ? $"Da ({proiect.NumarSubcontractori})" : "Nu")<br />

                @if (proiect.Subcontractori != null && proiect.Subcontractori.Any())
                {
                    <strong>Lista subcontractori:</strong>
                    <ul>
                        @foreach (var subcontractor in proiect.Subcontractori)
                        {
                            <li>@subcontractor.Nume (@subcontractor.Domeniu)</li>
                        }
                    </ul>
                }
                else
                {
                    <span>Nu există subcontractori asociați.</span>
                }
                <strong>Livrabile:</strong> @proiect.NrLivrabile
            </p>

            <a class="btn btn-sm btn-outline-primary"
               href="@NavigationManager.ToAbsoluteUri($"/")">
                Înapoi
            </a>
        </div>
    </div>

    <!-- Additional Acts Section -->
    <h4>Modificări prin Acte Adiționale</h4>
    @if (!modificariValoare.Any() && !prelungiriContract.Any() && !modificariLivrabile.Any())
    {
        <p>Nu există acte adiționale asociate acestui proiect.</p>
    }
    else
    {
        @if (modificariValoare.Any())
        {
            <h5>Modificări Valoare</h5>
            <ul>
                @foreach (var mod in modificariValoare)
                {
                    <li>
                        Data: @mod.DataAct.ToShortDateString() |
                        Valoare Nouă: @mod.ValoareNoua.ToString("C") |
                        Motiv: @mod.Motiv
                    </li>
                }
            </ul>
        }

        @if (prelungiriContract.Any())
        {
            <h5>Prelungiri Contract</h5>
            <ul>
                @foreach (var prelungire in prelungiriContract)
                {
                    <li>
                        Data: @prelungire.DataAct.ToShortDateString() |
                        Noua Dată Încheiere: @prelungire.NouaDataIncheiere.ToShortDateString() |
                        Observații: @(string.IsNullOrEmpty(prelungire.Observatii) ? "N/A" : prelungire.Observatii)
                    </li>
                }
            </ul>
        }

        @if (modificariLivrabile.Any())
        {
            <h5>Modificări Livrabile</h5>
            <ul>
                @foreach (var modLivrabile in modificariLivrabile)
                {
                    <li>
                        Data: @modLivrabile.DataAct.ToShortDateString() |
                        Tip Schimbare: @(modLivrabile.EsteAdaugare ? "Adăugare" : "Eliminare") |
                        Descriere: @modLivrabile.DescriereSchimbare
                    </li>
                }
            </ul>
        }
    }

    <!-- Tasks Section -->
    <h4>Sarcini Asociate</h4>
    @if (!tasks.Any())
    {
        <p>Nu există sarcini asociate acestui proiect.</p>
    }
    else
    {
        <ul>
            @foreach (var task in tasks)
            {
                <li>
                    Descriere: @task.Descriere |
                    Start: @task.DataStart.ToShortDateString() |
                    DeadLine: @task.Deadline.ToShortDateString() |
                    Status: @task.Status |
                    Responsabil: @(string.IsNullOrEmpty(task.ResponsabilId) ? "N/A" : task.ResponsabilId)
                </li>
            }
        </ul>
    }
}

@code {
    [Parameter]
    public int cod { get; set; }

    private ProiectEntity? proiect;
    private List<ModificareValoareEntity> modificariValoare = new();
    private List<PrelungireContractEntity> prelungiriContract = new();
    private List<ModificareLivrabileEntity> modificariLivrabile = new();
    private List<TaskProiectEntity> tasks = new();

    protected override async Task OnInitializedAsync()
    {
        // Load project details
        proiect = await DbContext.Proiecte
            .Include(p => p.Subcontractori)
            .FirstOrDefaultAsync(p => p.Cod == cod);

        // Load additional acts
        if (proiect != null)
        {
            modificariValoare = await DbContext.ModificariValoare
                .Where(mv => mv.Cod == cod)
                .ToListAsync();

            prelungiriContract = await DbContext.PrelungiriContracte
                .Where(pc => pc.Cod == cod)
                .ToListAsync();

            modificariLivrabile = await DbContext.ModificariLivrabile
                .Where(ml => ml.Cod == cod)
                .ToListAsync();

            // Load tasks
            tasks = await DbContext.Taskuri
                .Where(t => t.Cod == cod)
                .ToListAsync();
        }
    }
}