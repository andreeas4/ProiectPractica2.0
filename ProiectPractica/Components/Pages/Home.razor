@page "/"
@using Microsoft.AspNetCore.Identity
@using ProiectPractica.Entities
@using ProiectPractica.Components.Account
@using ProiectPractica.Services
@using ProiectPractica.Data
@using ProiectPractica.Interfaces
@inject UserManager<AppUserEntity> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IRepository<ProiectEntity> ProiectRepository
@inject IRepository<TaskProiectEntity> TaskRepository
@inject IRepository<ActAditionalEntity> ActAditionalRepository
@inject IRepository<ModificareValoareEntity> ModificareValoareRepository
@inject IRepository<PrelungireContractEntity> PrelungireContractRepository
@inject IRepository<ModificareLivrabileEntity> ModificareLivrabileRepository
@inject INotificationService NotificationService
@inject ILogger<Home> Logger
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IRepository<UserSelectedProject> UserSelectedProjectRepository
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
<PageTitle>Home</PageTitle>

<style>
    .section-container {
        margin-bottom: 2rem;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .tasks-section {
        background-color: #f8f9fa;
        border-left: 4px solid #007bff;
    }

    .select-projects-section {
        background-color: #e9ecef;
        border-left: 4px solid #28a745;
    }

    .selected-projects-section {
        background-color: #ffffff;
        border-left: 4px solid #dc3545;
    }

    .section-title {
        margin-bottom: 1rem;
        font-weight: 600;
        color: #343a40;
    }

    .task-card {
        transition: transform 0.2s;
    }

    .task-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .project-card {
        transition: transform 0.2s;
    }

    .project-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
</style>

<div class="container my-4">
    @if (currentUser == null)
    {
            <p>Please <a href="/Account/Login">log in</a> to view your contracts.</p>
    }
    else
    {
            <!-- Tasks Section -->
            <div class="section-container tasks-section">
                <h2 class="section-title">Taskurile Mele</h2>
            @if (myTasks.Any())
            {
                        <div class="mb-4">
                    @foreach (var task in myTasks)
                    {
                        var projectName = taskProjects.ContainsKey(task.Cod) ? taskProjects[task.Cod].NumeClient : "Unknown Project";
                                    <div class="card mb-2 task-card" key="@task.Id">
                                        <div class="card-body d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>@task.Descriere (Project: @projectName)</strong><br />
                                                <small>Start: @task.DataStart.ToShortDateString() | End: @task.Deadline.ToShortDateString() | Status: @task.Status</small>
                                            </div>
                                            <div class="form-check">
                                                <input type="checkbox" class="form-check-input" checked="@task.IsCompleted" @onchange="async (ChangeEventArgs e) => await OnTaskCheckboxChanged(task, (bool)e.Value)" />
                                                <label class="form-check-label">Completed</label>
                                            </div>
                                        </div>
                                    </div>
                    }
                        </div>
            }
            else
            {
                        <p>Nu ai taskuri active.</p>
            }
            </div>

            <!-- Select Projects Section -->
            <div class="section-container select-projects-section">
                <h2 class="section-title"></h2>
                <p>Selecteaza contractele mele</p>
            @if (myProiecte.Any())
            {
                        <div class="mb-3">
                            <select @bind="selectedProjectId" class="form-select">
                                <option value="0">-- Select a Project --</option>
                        @foreach (var proiect in myProiecte)
                        {
                                        <option value="@proiect.Cod">@proiect.NumeClient (Cod: @proiect.Cod)</option>
                        }
                            </select>
                        </div>
                        <button @onclick="AddSelectedProject" class="btn btn-secondary">Adauga Contract</button>
            }
            else
            {
                        <p>Nu esti responsabil de niciun contract.</p>
            }
            </div>

            <!-- Selected Projects Section -->
            <div class="section-container selected-projects-section">
                <h3 class="section-title">Contractele Tale</h3>
            @if (selectedProiecte.Any())
            {
                        <div class="row row-cols-1 row-cols-md-2 g-4">
                    @foreach (var proiect in selectedProiecte)
                    {
                        var luniRamase = GetLuniRamase(proiect.DataIncheiereContract);
                                    <div class="col">
                                        <div class="card shadow-sm border-primary project-card">
                                            <div class="card-body">
                                                <h5 class="card-title">@proiect.NumeClient (Cod: @proiect.Cod)</h5>
                                                <h6 class="card-subtitle mb-2 text-muted">@proiect.Domeniul</h6>
                                                <p class="card-text">
                                                    <strong>Obiect:</strong> @proiect.ObiectulContractului<br />
                                                    <strong>Valoare:</strong> @proiect.ValoareContract.ToString("C")<br />
                                                    <strong>Status:</strong> @proiect.Status<br />
                                                    <strong>Data încheiere:</strong> @proiect.DataIncheiereContract.ToShortDateString()<br />
                                                    <strong>Data semnare:</strong> @proiect.DataSemnareContract.ToShortDateString()<br />
                                                    <strong>Luni rămase:</strong> @luniRamase<br />
                                                    <strong>Subcontractori:</strong> @(proiect.AreSubcontractor ? $"Da ({proiect.NumarSubcontractori})" : "Nu")
                                                </p>
                                                <div class="btn-group">
                                                    <a class="btn btn-sm btn-outline-primary"
                                                       href="@NavigationManager.ToAbsoluteUri($"/detalii-proiectul-meu/{proiect.Cod}")">
                                                        Vezi detalii
                                                    </a>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveProject(proiect.Cod)">
                                                        Șterge
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-success" @onclick="() => ShowAddTaskModal(proiect.Cod)">
                                                        Adauga Task
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-info" @onclick="() => ShowAddActModal(proiect.Cod)">
                                                        Adauga Act Aditional
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                    }
                        </div>
            }
            else
            {
                        <p>No projects selected.</p>
            }
            </div>

            <!-- Task Modal -->
        @if (showTaskModal)
        {
                    <div class="modal fade show" style="display:block;" tabindex="-1" role="dialog">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Adauga Task pentru Proiectul @selectedProiect?.NumeClient</h5>
                                    <button type="button" class="btn-close" @onclick="CloseTaskModal"></button>
                                </div>
                                <div class="modal-body">
                                    <EditForm Model="newTask" OnValidSubmit="HandleAddTask">
                                        <DataAnnotationsValidator />
                                        <div class="mb-3">
                                            <label class="form-label">Descriere</label>
                                            <InputText class="form-control" @bind-Value="newTask.Descriere" />
                                            <ValidationMessage For="@(() => newTask.Descriere)" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Data Start</label>
                                            <InputDate class="form-control" @bind-Value="newTask.DataStart" />
                                            <ValidationMessage For="@(() => newTask.DataStart)" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Deadline</label>
                                            <InputDate class="form-control" @bind-Value="newTask.Deadline" />
                                            <ValidationMessage For="@(() => newTask.Deadline)" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Status</label>
                                            <InputSelect class="form-select" @bind-Value="newTask.Status">
                                                <option value="Open">Open</option>
                                                <option value="InProgress">In Progress</option>
                                                <option value="Completed">Completed</option>
                                            </InputSelect>
                                            <ValidationMessage For="@(() => newTask.Status)" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Responsabil</label>
                                            <InputSelect class="form-select" @bind-Value="newTask.ResponsabilId">
                                        @if (!projectUsers.Any())
                                        {
                                                        <option value="" disabled selected>No users available</option>
                                        }
                                        else
                                        {
                                                        <option value="" disabled selected>-- Select Responsabil --</option>
                                            @foreach (var user in projectUsers)
                                            {
                                                                <option value="@user.Id">@user.UserName</option>
                                            }
                                        }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => newTask.ResponsabilId)" />
                                        </div>
                                        <div class="mb-3 form-check">
                                            <InputCheckbox class="form-check-input" @bind-Value="newTask.EsteNotificare" />
                                            <label class="form-check-label">Send monthly notifications</label>
                                        </div>
                                        <button type="submit" class="btn btn-primary" disabled="@(!IsFormValid())">Salveaza Task</button>
                                        <button type="button" class="btn btn-secondary" @onclick="CloseTaskModal">Anuleaza</button>
                                @if (errorMessage != null)
                                {
                                                <div class="alert alert-danger mt-3">@errorMessage</div>
                                }
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-backdrop fade show"></div>
        }

            <!-- Act Modal -->
        @if (showActModal)
        {
                    <div class="modal fade show" style="display:block;" tabindex="-1" role="dialog">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Adauga Act Aditional pentru Proiectul @selectedProiect?.NumeClient</h5>
                                    <button type="button" class="btn-close" @onclick="CloseActModal"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="mb-3">
                                        <label class="form-label">Tip Act</label>
                                        <select class="form-select" @bind="selectedActType">
                                            <option value="">-- Select Tip Act --</option>
                                            <option value="ModificareValoare">Modificare Valoare</option>
                                            <option value="PrelungireContract">Prelungire Contract</option>
                                            <option value="ModificareLivrabile">Modificare Livrabile</option>
                                        </select>
                                    </div>

                            @if (selectedActType == "ModificareValoare")
                            {
                                            <EditForm Model="modificareValoare" OnValidSubmit="HandleAddModificareValoare">
                                                <DataAnnotationsValidator />
                                                <div class="mb-3">
                                                    <label class="form-label">Data Act</label>
                                                    <InputDate class="form-control" @bind-Value="modificareValoare.DataAct" />
                                                    <ValidationMessage For="@(() => modificareValoare.DataAct)" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Valoare Noua</label>
                                                    <InputNumber class="form-control" @bind-Value="modificareValoare.ValoareNoua" />
                                                    <ValidationMessage For="@(() => modificareValoare.ValoareNoua)" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Motiv</label>
                                                    <InputTextArea class="form-control" @bind-Value="modificareValoare.Motiv" />
                                                    <ValidationMessage For="@(() => modificareValoare.Motiv)" />
                                                </div>
                                                <button type="submit" class="btn btn-primary">Salveaza Act</button>
                                                <button type="button" class="btn btn-secondary" @onclick="CloseActModal">Anuleaza</button>
                                            </EditForm>
                            }
                            else if (selectedActType == "PrelungireContract")
                            {
                                            <EditForm Model="prelungireContract" OnValidSubmit="HandleAddPrelungireContract">
                                                <DataAnnotationsValidator />
                                                <div class="mb-3">
                                                    <label class="form-label">Data Act</label>
                                                    <InputDate class="form-control" @bind-Value="prelungireContract.DataAct" />
                                                    <ValidationMessage For="@(() => prelungireContract.DataAct)" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Noua Data Incheiere</label>
                                                    <InputDate class="form-control" @bind-Value="prelungireContract.NouaDataIncheiere" />
                                                    <ValidationMessage For="@(() => prelungireContract.NouaDataIncheiere)" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Observatii</label>
                                                    <InputTextArea class="form-control" @bind-Value="prelungireContract.Observatii" />
                                                    <ValidationMessage For="@(() => prelungireContract.Observatii)" />
                                                </div>
                                                <button type="submit" class="btn btn-primary">Salveaza Act</button>
                                                <button type="button" class="btn btn-secondary" @onclick="CloseActModal">Anuleaza</button>
                                            </EditForm>
                            }
                            else if (selectedActType == "ModificareLivrabile")
                            {
                                            <EditForm Model="modificareLivrabile" OnValidSubmit="HandleAddModificareLivrabile">
                                                <DataAnnotationsValidator />
                                                <div class="mb-3">
                                                    <label class="form-label">Data Act</label>
                                                    <InputDate class="form-control" @bind-Value="modificareLivrabile.DataAct" />
                                                    <ValidationMessage For="@(() => modificareLivrabile.DataAct)" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Descriere Schimbare</label>
                                                    <InputTextArea class="form-control" @bind-Value="modificareLivrabile.DescriereSchimbare" />
                                                    <ValidationMessage For="@(() => modificareLivrabile.DescriereSchimbare)" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Tip Schimbare</label>
                                                    <InputSelect class="form-select" @bind-Value="modificareLivrabile.EsteAdaugare">
                                                        <option value="true">Adaugare</option>
                                                        <option value="false">Eliminare</option>
                                                    </InputSelect>
                                                    <ValidationMessage For="@(() => modificareLivrabile.EsteAdaugare)" />
                                                </div>
                                                <button type="submit" class="btn btn-primary">Salveaza Act</button>
                                                <button type="button" class="btn btn-secondary" @onclick="CloseActModal">Anuleaza</button>
                                            </EditForm>
                            }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-backdrop fade show"></div>
        }
    }
</div>

@code {
    private AppUserEntity? currentUser;
    private List<ProiectEntity> myProiecte = new();
    private int selectedProjectId;
    private List<ProiectEntity> selectedProiecte = new();
    private List<TaskProiectEntity> myTasks = new();
    private bool showTaskModal;
    private bool showActModal;
    private TaskProiectEntity newTask = new();
    private ModificareValoareEntity modificareValoare = new();
    private PrelungireContractEntity prelungireContract = new();
    private ModificareLivrabileEntity modificareLivrabile = new();
    private string selectedActType = "";
    private int currentProiectCod;
    private ProiectEntity? selectedProiect;
    private List<AppUserEntity> projectUsers = new();
    private string? errorMessage;
    private Dictionary<int, ProiectEntity> taskProjects = new();

    private int GetLuniRamase(DateTime dataIncheiere)
    {
        var dataCurenta = DateTime.Now;
        var diferenta = dataIncheiere.Year * 12 + dataIncheiere.Month - (dataCurenta.Year * 12 + dataCurenta.Month);
        return diferenta > 0 ? diferenta : 0;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (HttpContextAccessor.HttpContext != null)
            {
                currentUser = await UserAccessor.GetRequiredUserAsync(HttpContextAccessor.HttpContext);
            }
        }
        catch (InvalidOperationException ex)
        {
            Logger.LogError(ex, "Failed to load current user.");
        }

        if (currentUser != null)
        {
            var responsibleQuery = ProiectRepository.GetAllQueryable()
                .Include(p => p.Responsabili)
                .Where(p => p.Responsabili.Any(rp => rp.AppUserId == currentUser.Id));
            myProiecte = await responsibleQuery.ToListAsync();
            Logger.LogInformation("Loaded {Count} responsible projects for user {Email}", myProiecte.Count, currentUser.Email);

            var selectedQuery = UserSelectedProjectRepository.GetAllQueryable()
                .Include(up => up.Proiect);
            var userSelections = await selectedQuery
                .Where(up => up.UserId == currentUser.Id)
                .ToListAsync();
            selectedProiecte = userSelections.Select(up => up.Proiect).ToList();

            myTasks = await TaskRepository.GetAllQueryable()
                .Where(t => t.ResponsabilId == currentUser.Id)
                .ToListAsync();
            var taskProjectCodes = myTasks.Select(t => t.Cod).Distinct();
            var projects = await ProiectRepository.GetAllQueryable()
                .Where(p => taskProjectCodes.Contains(p.Cod))
                .ToDictionaryAsync(p => p.Cod, p => p);
            taskProjects = projects;
            foreach (var task in myTasks)
            {
                task.IsCompleted = task.Status == "Completed";
            }
            Logger.LogInformation("Loaded {Count} tasks for user {Email}", myTasks.Count, currentUser.Email);
        }
    }

    private async Task AddSelectedProject()
    {
        if (selectedProjectId != 0 && myProiecte.Any(p => p.Cod == selectedProjectId))
        {
            var selected = myProiecte.First(p => p.Cod == selectedProjectId);
            if (!selectedProiecte.Contains(selected))
            {
                selectedProiecte.Add(selected);
                var userSelection = new UserSelectedProject
                    {
                        UserId = currentUser!.Id,
                        ProiectId = selected.Cod
                    };
                await UserSelectedProjectRepository.AddAsync(userSelection);
                await UserSelectedProjectRepository.SaveAsync();
                Logger.LogInformation("Added project {Cod} to selected projects for user {Email}", selected.Cod, currentUser.Email);
            }
        }
        selectedProjectId = 0;
    }

    private async Task RemoveProject(int codProiect)
    {
        var proiectToRemove = selectedProiecte.FirstOrDefault(p => p.Cod == codProiect);
        if (proiectToRemove != null)
        {
            selectedProiecte.Remove(proiectToRemove);
            var userSelection = await UserSelectedProjectRepository.GetAllQueryable()
                .Where(up => up.UserId == currentUser!.Id && up.ProiectId == codProiect)
                .FirstOrDefaultAsync();
            if (userSelection != null)
            {
                UserSelectedProjectRepository.Delete(userSelection);
                await UserSelectedProjectRepository.SaveAsync();
                Logger.LogInformation("Removed project {Cod} from selected projects for user {Email}", codProiect, currentUser.Email);
            }
        }
    }

    private async Task ShowAddTaskModal(int codProiect)
    {
        try
        {
            Logger.LogInformation("Opening task modal for project {Cod}", codProiect);
            currentProiectCod = codProiect;
            selectedProiect = selectedProiecte.FirstOrDefault(p => p.Cod == codProiect);
            newTask = new TaskProiectEntity
                {
                    Cod = codProiect,
                    DataStart = DateTime.Today,
                    Deadline = DateTime.Today.AddDays(7),
                    Status = "Open",
                    EsteNotificare = true
                };

            var responsabili = await ProiectRepository.GetQueryableWithIncludes(p => p.Responsabili)
                .Where(p => p.Cod == codProiect)
                .SelectMany(p => p.Responsabili)
                .Select(rp => rp.AppUser)
                .ToListAsync();
            projectUsers = responsabili;
            Logger.LogInformation("Loaded {UserCount} users for project {Cod}: {@Users}", projectUsers.Count, codProiect, projectUsers.Select(u => u.Id));

            if (!projectUsers.Any())
            {
                errorMessage = "No users are assigned to this project. Please assign users before creating tasks.";
                showTaskModal = true;
                StateHasChanged();
                return;
            }

            showTaskModal = true;
            errorMessage = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error opening task modal for project {Cod}", codProiect);
            errorMessage = "Failed to load task modal. Please try again.";
            showTaskModal = true;
            StateHasChanged();
        }
    }

    private void CloseTaskModal()
    {
        showTaskModal = false;
        newTask = new();
        projectUsers = new();
        errorMessage = null;
        StateHasChanged();
    }

    private async Task HandleAddTask()
    {
        try
        {
            Logger.LogInformation("Attempting to save task: {@Task}", newTask);
            if (string.IsNullOrEmpty(newTask.ResponsabilId) || !projectUsers.Any(u => u.Id == newTask.ResponsabilId))
            {
                errorMessage = "Please select a valid responsible user.";
                Logger.LogWarning("Task creation failed: Invalid ResponsabilId '{ResponsabilId}' for project {Cod}", newTask.ResponsabilId, currentProiectCod);
                StateHasChanged();
                return;
            }

            await TaskRepository.AddAsync(newTask);
            await TaskRepository.SaveAsync();

            var proiect = await ProiectRepository.GetByIdAsync(currentProiectCod);
            ProiectRepository.Update(proiect);
            await ProiectRepository.SaveAsync();

            try
            {
                var responsabil = await UserManager.FindByIdAsync(newTask.ResponsabilId);
                if (responsabil != null)
                {
                    await NotificationService.SendTaskNotificationAsync(newTask, responsabil);
                    await NotificationService.ShowUINotificationAsync(
                        $"Task assigned to {responsabil.UserName} for project {selectedProiect?.NumeClient}",
                        currentUser!.Id);
                }
            }
            catch (Exception notificationEx)
            {
                Logger.LogWarning(notificationEx, "Failed to send notifications for task in project {Cod}", currentProiectCod);
                errorMessage = "Task created successfully, but notifications could not be sent.";
                StateHasChanged();
            }

            myTasks = await TaskRepository.GetAllQueryable()
                .Where(t => t.ResponsabilId == currentUser!.Id)
                .ToListAsync();
            var taskProjectCodes = myTasks.Select(t => t.Cod).Distinct();
            taskProjects = await ProiectRepository.GetAllQueryable()
                .Where(p => taskProjectCodes.Contains(p.Cod))
                .ToDictionaryAsync(p => p.Cod, p => p);
            foreach (var task in myTasks)
            {
                task.IsCompleted = task.Status == "Completed";
            }

            Logger.LogInformation("Added task for project {Cod} by user {Email}", currentProiectCod, currentUser!.Email);
            CloseTaskModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to create task: {ex.Message}";
            Logger.LogError(ex, "Error creating task for project {Cod}", currentProiectCod);
            StateHasChanged();
        }
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrEmpty(newTask.Descriere) &&
               newTask.DataStart != default &&
               newTask.Deadline != default &&
               !string.IsNullOrEmpty(newTask.Status) &&
               !string.IsNullOrEmpty(newTask.ResponsabilId) &&
               projectUsers.Any(u => u.Id == newTask.ResponsabilId);
    }

    private void ShowAddActModal(int codProiect)
    {
        currentProiectCod = codProiect;
        selectedProiect = selectedProiecte.FirstOrDefault(p => p.Cod == codProiect);
        modificareValoare = new() { Cod = codProiect, DataAct = DateTime.Today };
        prelungireContract = new() { Cod = codProiect, DataAct = DateTime.Today };
        modificareLivrabile = new() { Cod = codProiect, DataAct = DateTime.Today };
        selectedActType = "";
        showActModal = true;
        StateHasChanged();
    }

    private void CloseActModal()
    {
        showActModal = false;
        selectedActType = "";
        StateHasChanged();
    }

    private async Task CreateAutomaticTask(int codProiect)
    {
        var proiect = await ProiectRepository.GetByIdAsync(codProiect);
        if (proiect != null && proiect.AreSubcontractor)
        {
            var autoTask = new TaskProiectEntity
                {
                    Cod = codProiect,
                    ResponsabilId = currentUser!.Id,
                    Descriere = "raport to Subcontractor",
                    DataStart = DateTime.Today,
                    Deadline = DateTime.Today.AddDays(7),
                    Status = "InProgress",
                    EsteNotificare = false
                };
            await TaskRepository.AddAsync(autoTask);
            await TaskRepository.SaveAsync();
            Logger.LogInformation("Created automatic task for project {Cod} by user {Email}", codProiect, currentUser.Email);

            myTasks = await TaskRepository.GetAllQueryable()
                .Where(t => t.ResponsabilId == currentUser!.Id)
                .ToListAsync();
            var taskProjectCodes = myTasks.Select(t => t.Cod).Distinct();
            taskProjects = await ProiectRepository.GetAllQueryable()
                .Where(p => taskProjectCodes.Contains(p.Cod))
                .ToDictionaryAsync(p => p.Cod, p => p);
            foreach (var task in myTasks)
            {
                task.IsCompleted = task.Status == "Completed";
            }
        }
    }

    private async Task HandleAddModificareValoare()
    {
        await ModificareValoareRepository.AddAsync(modificareValoare);
        await ModificareValoareRepository.SaveAsync();

        var proiect = await ProiectRepository.GetByIdAsync(currentProiectCod);
        proiect.ValoareContract = modificareValoare.ValoareNoua;
        ProiectRepository.Update(proiect);
        await ProiectRepository.SaveAsync();

        await CreateAutomaticTask(currentProiectCod);

        Logger.LogInformation("Added ModificareValoare for project {Cod} by user {Email}", currentProiectCod, currentUser!.Email);
        CloseActModal();
    }

    private async Task HandleAddPrelungireContract()
    {
        await PrelungireContractRepository.AddAsync(prelungireContract);
        await PrelungireContractRepository.SaveAsync();

        var proiect = await ProiectRepository.GetByIdAsync(currentProiectCod);
        proiect.DataIncheiereContract = prelungireContract.NouaDataIncheiere;
        ProiectRepository.Update(proiect);
        await ProiectRepository.SaveAsync();

        await CreateAutomaticTask(currentProiectCod);

        Logger.LogInformation("Added PrelungireContract for project {Cod} by user {Email}", currentProiectCod, currentUser!.Email);
        CloseActModal();
    }

    private async Task HandleAddModificareLivrabile()
    {
        await ModificareLivrabileRepository.AddAsync(modificareLivrabile);
        await ModificareLivrabileRepository.SaveAsync();

        var proiect = await ProiectRepository.GetByIdAsync(currentProiectCod);
        if (modificareLivrabile.EsteAdaugare)
            proiect.NrLivrabile++;
        else
            proiect.NrLivrabile--;
        ProiectRepository.Update(proiect);
        await ProiectRepository.SaveAsync();

        await CreateAutomaticTask(currentProiectCod);

        Logger.LogInformation("Added ModificareLivrabile for project {Cod} by user {Email}", currentProiectCod, currentUser!.Email);
        CloseActModal();
    }

    private async Task OnTaskCheckboxChanged(TaskProiectEntity task, bool isChecked)
    {
        task.IsCompleted = isChecked;
        if (isChecked)
        {
            await OnTaskCompleted(task);
        }
        StateHasChanged();
    }

    private async Task OnTaskCompleted(TaskProiectEntity task)
    {
        if (task.IsCompleted)
        {
            TaskRepository.Delete(task);
            await TaskRepository.SaveAsync();
            myTasks.Remove(task);
            Logger.LogInformation("Task {TaskId} marked as completed and deleted by user {Email}", task.Id, currentUser!.Email);
            StateHasChanged();
        }
    }
}