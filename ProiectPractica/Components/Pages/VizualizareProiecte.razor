@page "/vizualizare-proiecte"
@using ProiectPractica.Entities
@using ProiectPractica.Components.Account
@using ProiectPractica.Interfaces
@using ProiectPractica.Models
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager

@inject ProiectPractica.Data.ApplicationDbContext DbContext
@inject IdentityUserAccessor UserAccessor
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor

@rendermode InteractiveServer


@if (currentUser == null)
{
    <p>Please <a href="/Account/Login">log in</a> to view all the contracts.</p>
}
else
{
    <h2>Toate Contractele</h2>

    <a class="btn btn-success" href="@NavigationManager.ToAbsoluteUri("/adauga-proiect")">
        <i class="bi bi-plus-circle"></i> + Adaugă Contract
    </a>

    @if (proiecte == null)
    {
        <p>Se încarcă contractele...</p>
    }
    else if (!proiecte.Any())
    {
        <p>Nu există contracte înregistrate.</p>
    }
    else
    {

        <div class="row row-cols-1 row-cols-md-2 g-4">
            @foreach (var proiect in proiecte)
            {
                var luniRamase = GetLuniRamase(proiect.DataIncheiereContract); // Calculăm lunile rămase pentru fiecare proiect
                <div class="col">
                    <div class="card shadow-sm border-primary">
                        <div class="card-body">
                            <h5 class="card-title">@proiect.NumeClient (@proiect.Cod)</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@proiect.Domeniul</h6>
                            <p class="card-text">
                                <strong>Obiect:</strong> @proiect.ObiectulContractului<br />
                                <strong>Valoare:</strong> @proiect.ValoareContract.ToString("C")<br />
                                <strong>Status:</strong> @proiect.Status.ToString()<br />
                                <strong>Data încheiere:</strong> @proiect.DataIncheiereContract.ToShortDateString()<br />
                                <strong>Data semnare:</strong> @proiect.DataSemnareContract.ToShortDateString()<br />
                                <strong>Luni rămase:</strong> @luniRamase
                                <strong>Subcontractori:</strong> @(proiect.AreSubcontractor ? $"Da ({proiect.NumarSubcontractori})" : "Nu")

                            </p>

                            <a class="btn btn-sm btn-outline-primary"
                               href="@NavigationManager.ToAbsoluteUri($"/detalii-proiect/{proiect.Cod}")">
                                Vezi detalii
                            </a>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => ConfirmareStergere(proiect.Cod)">
                                    Șterge
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>


    }
}



@code {
    private List<ProiectEntity> proiecte = new();
    private AppUserEntity? currentUser;
    
    private void NavigheazaLaDetalii(int codProiect)
    {
        NavigationManager.NavigateTo($"/detalii-proiect/{codProiect}");
    }
    private int luniRamase=0;
    private int GetLuniRamase(DateTime dataIncheiere)
    {
        var dataCurenta = DateTime.Now;
        var diferenta = dataIncheiere.Year * 12 + dataIncheiere.Month - (dataCurenta.Year * 12 + dataCurenta.Month);
        return diferenta;
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUser = await UserAccessor.GetRequiredUserAsync(HttpContextAccessor.HttpContext);

        }
        catch (InvalidOperationException ex)
        {

        }
        proiecte = await DbContext.Proiecte.ToListAsync();

        Console.WriteLine("Proiecte încărcate: " + proiecte.Count);
        foreach (var p in proiecte)
        {
            Console.WriteLine($"Cod: {p.Cod}, Client: {p.NumeClient}, Domeniu: {p.Domeniul}");
        }
    }
    private async Task ConfirmareStergere(int codProiect)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Sigur vrei să ștergi proiectul cu cod {codProiect}?");
        if (confirmed)
        {
            await StergeProiect(codProiect);
        }
    }

    private async Task StergeProiect(int codProiect)
    {
        try
        {
            var proiectDeSters = await DbContext.Proiecte.FindAsync(codProiect);
            if (proiectDeSters != null)
            {
                DbContext.Proiecte.Remove(proiectDeSters);
                await DbContext.SaveChangesAsync();

                // Elimină proiectul din lista locală ca să actualizezi UI-ul
                proiecte.RemoveAll(p => p.Cod == codProiect);

                StateHasChanged(); // Forțează re-render-ul paginii
            }
            else
            {
                // Opțional: afișează mesaj eroare, proiectul nu a fost găsit
                Console.WriteLine($"Proiectul cu cod {codProiect} nu a fost găsit.");
            }
        }
        catch (Exception ex)
        {
            // Opțional: tratează eroarea, afișează mesaj
            Console.WriteLine($"Eroare la ștergerea proiectului: {ex.Message}");
        }
    }
}
